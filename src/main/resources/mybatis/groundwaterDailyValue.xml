<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="groundwaterDailyValue">

    <select id="getGeoJson" parameterType="String" resultType="String">
        with
            gw_daily_value as (
                select groundwater_daily_value_identifier,
                       monitoring_location_id,
                       min(time_step) phenomenon_time_start,
                       max(time_step) phenomenon_time_end,
                       observered_property_name,
                       observered_property_reference,
                       statistic,
                       statistic_reference,
                       json_agg(time_step) time_step_agg,
                       unit_of_measure,
                       unit_of_measure_reference,
                       json_agg(result) result_agg,
                       json_agg(nil_reason) nil_reason_agg,
                       json_agg(approvals) approvals_agg,
                       json_agg(qualifiers) qualifiers_agg,
                       json_agg(grades) grades_agg
                  from nwis.groundwater_daily_value
                 where time_series_unique_id = #{timeseriesId,jdbcType=VARCHAR}
                   and monitoring_location_identifier = #{featureId,jdbcType=VARCHAR}
                 group by groundwater_daily_value_identifier,
                          monitoring_location_id,
                          observered_property_name,
                          observered_property_reference,
                          statistic,
                          statistic_reference,
                          unit_of_measure,
                          unit_of_measure_reference
            )
        select json_build_object(
                                 'type', 'Feature',
                                 'id', groundwater_daily_value_identifier,
                                 'geometry', json_build_object(
                                                               'type', 'Point',
                                                               'coordinates', json_build_array(
                                                                                               to_json(trunc(st_x(st_transform(geom, 4326))::numeric, 7)),
                                                                                               to_json(trunc(st_y(st_transform(geom, 4326))::numeric, 7))
                                                                                              )
                                                                ),
                                 'properties', json_build_object(
                                                                 'observationType', 'MeasureTimeseriesObservation',
                                                                 'phenomenonTimeStart', phenomenon_time_start,
                                                                 'phenomenonTimeEnd', phenomenon_time_end,
                                                                 'observedPropertyName', observered_property_name,
                                                                 'observedPropertyReference', observered_property_reference,
                                                                 'samplingFeatureName', site_name,
                                                                 'statistic', statistic,
                                                                 'statisticReference', statistic_reference,
                                                                 'timeStep', time_step_agg,
                                                                 'unitOfMeasureName', unit_of_measure,
                                                                 'unitOfMeasureReference', unit_of_measure_reference,
                                                                 'result', result_agg,
                                                                 'nilReason', nil_reason_agg,
                                                                 'approvals', approvals_agg,
                                                                 'qualifiers', qualifiers_agg,
                                                                 'grades', grades_agg
                                                                 )
                                )
          from gw_daily_value
          join nwis.monitoring_location
            on gw_daily_value.monitoring_location_id = monitoring_location.monitoring_location_id
         where (geom is not null
           and nwis.monitoring_location.monitoring_location_identifier = #{featureId,jdbcType=VARCHAR})
           and ('monitoring-locations' = #{collectionId,jdbcType=VARCHAR}
            or exists (
                   select 1
                     from nwis.network
                     join nwis.network_sites
                       on nwis.network.network_id = nwis.network_sites.network_id
                    where nwis.network.network_code = #{collectionId,jdbcType=VARCHAR}
                      and nwis.network_sites.monitoring_location_id = nwis.monitoring_location.monitoring_location_id
           ))
    </select>

</mapper>
